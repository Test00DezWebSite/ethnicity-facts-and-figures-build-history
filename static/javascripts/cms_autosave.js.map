{"version":3,"sources":["click_to_edit.js","reorder_dimensions.js","organisation_autocomplete.js"],"names":["PreviewAndEditSection","element","preview","edit","text_inputs","text_area","checkboxesAndRadios","inputBlurred","event","classList","contains","target","saveAndPreview","cancelClicked","showPreview","value","textContent","preventDefault","enterKeyPressed","keyCode","displayText","trim","innerHTML","replace","length","checkedLabels","i","checked","fieldId","getAttribute","associatedLabel","document","querySelector","push","console","warn","join","remove","add","previewKeyedUp","showEdit","previewClicked","toggle","focus","querySelectorAll","radioButtons","addEventListener","cancel","save","setup","setupAutosave","previewAndEditSections","moveDimensionUp","row","$","currentTarget","parents","prev","insertBefore","syncDimensionOrder","moveDimensionDown","next","insertAfter","guid","rows","dimensions","each","index","data","ajax","type","url","set_dimension_order_post_url","dataType","contentType","JSON","stringify","publisherFields","govukGovernmentOrganisationsAutocomplete","selectElement","showAllValues","minLength","defaultValue","ready","click"],"mappings":"AACA,SAAAA,sBAAAC,GAEA,IACAC,EAAAC,EAAAC,EAAAC,EAAAC,EADAL,EAAAA,EAuCA,SAAAM,EAAAC,GAEAL,EAAAM,UAAAC,SAAA,WAAAF,EAAAG,OAAAF,UAAAC,SAAA,iBACAE,EAAAJ,GAIA,SAAAK,EAAAL,GAEAM,IAEAV,EAAA,KACAF,EAAAO,UAAAC,SAAA,SACAN,EAAA,GAAAW,MAAA,GAEAX,EAAA,GAAAW,MAAAb,EAAAc,aAIAR,EAAAS,iBAGA,SAAAC,EAAAV,GACA,IAAAA,EAAAW,SACAP,EAAAJ,GAIA,SAAAI,EAAAJ,GAEA,IAAAY,EAGA,GAAAhB,EAAA,GACAgB,EAAAhB,EAAA,GAAAW,MAAAM,YAEA,GAAAhB,EACAe,EAAAf,EAAAU,MAAAM,OAEAhB,EAAAI,UAAAC,SAAA,eACAR,EAAAoB,UAAAF,EAAAG,QAAA,UAAA,QAAAA,QAAA,MAAA,SACAlB,EAAAI,UAAAC,SAAA,oBACAR,EAAAoB,UAAAF,EAAAG,QAAA,MAAA,QAAAA,QAAA,MAAA,eAIA,GAAA,EAAAjB,EAAAkB,OAAA,CAIA,IAFA,IAAAC,EAAA,GAEAC,EAAA,EAAAA,EAAApB,EAAAkB,OAAAE,IAEA,GAAApB,EAAAoB,GAAAC,QAAA,CAEA,IAAAC,EAAAtB,EAAAoB,GAAAG,aAAA,MACAC,EAAAC,SAAAC,cAAA,aAAAJ,EAAA,KAEAE,EACAL,EAAAQ,KAAAH,EAAAd,aAEAkB,QAAAC,KAAA,sCAAAP,GAKA,EAAAH,EAAAD,SAEAJ,EAAAK,EAAAW,KAAA,OAQAhB,GAAAlB,EAAA2B,aAAA,uBACAT,EAAAlB,EAAA2B,aAAA,sBAGAT,GAAA,IAAAA,GAEAlB,EAAAc,YAAAI,EACAlB,EAAAO,UAAA4B,OAAA,WAIAnC,EAAAO,UAAA6B,IAAA,SACApC,EAAAc,YAAAd,EAAA2B,aAAA,oBAIAf,IACAN,EAAAS,iBAGA,SAAAsB,EAAA/B,GACA,IAAAA,EAAAW,SACAqB,IAIA,SAAAC,EAAAjC,GACAgC,IAGA,SAAAA,IACAtC,EAAAO,UAAAiC,OAAA,UACAvC,EAAAM,UAAAiC,OAAA,UACAtC,EAAA,IACAA,EAAA,GAAAuC,QAEAtC,GACAA,EAAAsC,QAIA,SAAA7B,IACAX,EAAAM,UAAA6B,IAAA,UACApC,EAAAO,UAAA4B,OAAA,WAzJA,WAEAnC,EAAAD,EAAA+B,cAAA,YACA7B,EAAAF,EAAA+B,cAAA,SACA5B,EAAAD,EAAAyC,iBAAA,2EACAvC,EAAAF,EAAA6B,cAAA,YAEA1B,EAAAH,EAAAyC,iBAAA,2CAEAC,aAAA1C,EAAAyC,iBAAA,qBAEA1C,EAAA4C,iBAAA,QAAAL,GACAvC,EAAA4C,iBAAA,QAAAP,GAEA,GAAAnC,EAAAoB,SACApB,EAAA,GAAA0C,iBAAA,OAAAvC,GACAH,EAAA,GAAA0C,iBAAA,QAAA5B,IAGAb,GACAA,EAAAyC,iBAAA,OAAAvC,GAIA,IAAAwC,EAAA5C,EAAA6B,cAAA,WACAe,GACAA,EAAAD,iBAAA,QAAAjC,GAGA,IAAAmC,EAAA7C,EAAA6B,cAAA,SACAgB,GACAA,EAAAF,iBAAA,QAAAlC,GAjCAqC,GA+JA,SAAAC,gBAIA,IAFA,IAAAC,EAAApB,SAAAa,iBAAA,qBAEAlB,EAAA,EAAAA,EAAAyB,EAAA3B,OAAAE,IACA,IAAA1B,sBAAAmD,EAAAzB,ICvKA,SAAA0B,gBAAA5C,GACAA,EAAAS,iBACA,IAAAoC,EAAAC,EAAA9C,EAAA+C,eAAAC,QAAA,YACA,EAAAH,EAAAI,OAAAjC,SACA6B,EAAAK,aAAAL,EAAAI,QACAE,sBAIA,SAAAC,kBAAApD,GACAA,EAAAS,iBACA,IAAAoC,EAAAC,EAAA9C,EAAA+C,eAAAC,QAAA,WACA,EAAAH,EAAAQ,OAAArC,SACA6B,EAAAS,YAAAT,EAAAQ,QACAF,sBAIA,SAAAA,qBACA,IAEAI,EAFAC,EAAAV,EAAA,cACAW,EAAA,GAGAX,EAAAU,GAAAE,KAAA,SAAAC,EAAAd,GACAU,EAAAT,EAAAD,GAAAe,KAAA,kBACAH,EAAAhC,KAAA,CAAAkC,MAAAA,EAAAJ,KAAAA,MAEAT,EAAAe,KAAA,CACAC,KAAA,OACAC,IAAAC,6BACAC,SAAA,OACAC,YAAA,mBACAN,KAAAO,KAAAC,UAAA,CAAAX,WAAAA,MD4IAlC,SAAAe,iBAAA,mBAAAI,eE5KAnB,SAAAe,iBAAA,mBAAA,WAGA,IADA,IAAA+B,EAAA9C,SAAAa,iBAAA,oBACAlB,EAAA,EAAAA,EAAAmD,EAAArD,OAAAE,IACAoD,yCAAA,CACAC,cAAAF,EAAAnD,GACAsD,eAAA,EACAC,UAAA,EACAC,aAAA,OD4BA5B,EAAAvB,UAAAoD,MAAA,WACA7B,EAAA,YAAA8B,MAAAhC,iBACAE,EAAA,cAAA8B,MAAAxB","file":"cms_autosave.js","sourcesContent":["// Functions to enable click-to-edit fields\n    function PreviewAndEditSection(element) {\n\n        var element = element;\n        var preview, edit, text_inputs, text_area, checkboxesAndRadios\n        setup();\n\n        function setup() {\n\n            preview = element.querySelector('.preview');\n            edit = element.querySelector('.edit');\n            text_inputs = edit.querySelectorAll('input[type=text]:not(.js-dependent), input[type=url]:not(.js-dependent)');\n            text_area = edit.querySelector('textarea');\n\n            checkboxesAndRadios = edit.querySelectorAll('input[type=checkbox], input[type=radio]')\n\n            radioButtons = edit.querySelectorAll('input[type=radio]')\n\n           preview.addEventListener('click', previewClicked);\n           preview.addEventListener('keyup', previewKeyedUp);\n\n            if (text_inputs.length == 1) {\n                text_inputs[0].addEventListener('blur', inputBlurred);\n                text_inputs[0].addEventListener('keyup', enterKeyPressed);\n            }\n\n            if (text_area) {\n                text_area.addEventListener('blur', inputBlurred);\n            }\n\n\n            var cancel = edit.querySelector('.cancel')\n            if (cancel) {\n                cancel.addEventListener('click', cancelClicked);\n            }\n\n            var save = edit.querySelector('.save')\n            if (save) {\n                save.addEventListener('click', saveAndPreview);\n            }\n        }\n\n        function inputBlurred(event) {\n\n            if (!edit.classList.contains('hidden') && !event.target.classList.contains('js-dependent')) {\n                saveAndPreview(event);\n            }\n        }\n\n        function cancelClicked(event) {\n\n            showPreview();\n\n            if (text_inputs[0]) {\n                if (preview.classList.contains('empty')) {\n                    text_inputs[0].value = '';\n                } else {\n                    text_inputs[0].value = preview.textContent;\n                }\n            }\n\n            event.preventDefault()\n        }\n\n        function enterKeyPressed(event) {\n            if (event.keyCode == 13) {\n                saveAndPreview(event);\n            }\n        }\n\n        function saveAndPreview(event) {\n\n            var displayText;\n\n            /* TODO: MAKE CALL TO SAVE THE UPDATED FIELD */\n            if (text_inputs[0]) {\n                displayText = text_inputs[0].value.trim();\n            }\n            else if (text_area) {\n                displayText = text_area.value.trim();\n\n                if (text_area.classList.contains('for-bullets')) {\n                    preview.innerHTML = displayText.replace(/^\\*\\s/gm, \"<li>\").replace(/\\n/g, '</li>');\n                } else if (text_area.classList.contains('for-paragraphs')) {\n                    preview.innerHTML = displayText.replace(/\\n/g, \"<br>\").replace(/\\n/g, '</li>');\n                }\n            }\n\n            else if (checkboxesAndRadios.length > 0) {\n\n                var checkedLabels = []\n\n                for (var i = 0; i < checkboxesAndRadios.length; i++) {\n\n                    if (checkboxesAndRadios[i].checked) {\n\n                        var fieldId = checkboxesAndRadios[i].getAttribute('id')\n                        var associatedLabel = document.querySelector('label[for=' + fieldId + ']')\n\n                        if (associatedLabel) {\n                            checkedLabels.push(associatedLabel.textContent)\n                        } else {\n                            console.warn('Missing label for checkbox with ID ' + fieldId)\n                        }\n                    }\n                }\n\n                if (checkedLabels.length > 0) {\n\n                    displayText = checkedLabels.join(', ')\n\n                }\n\n            }\n\n\n            /* override the display text from the data attribute if it exists */\n            if (displayText && preview.getAttribute('data-preview-text')) {\n                displayText = preview.getAttribute('data-preview-text')\n            }\n\n            if (displayText && displayText != '') {\n\n                preview.textContent = displayText\n                preview.classList.remove('empty')\n\n            } else {\n\n                preview.classList.add('empty');\n                preview.textContent = preview.getAttribute('data-empty-text');\n\n            }\n\n            showPreview();\n            event.preventDefault()\n        }\n\n        function previewKeyedUp(event) {\n            if (event.keyCode == 13) {\n                showEdit();\n            }\n        }\n\n        function previewClicked(event) {\n            showEdit();\n        }\n\n        function showEdit() {\n            preview.classList.toggle('hidden');\n            edit.classList.toggle('hidden');\n            if (text_inputs[0]) {\n                text_inputs[0].focus();\n            }\n            if (text_area) {\n                text_area.focus();\n            }\n        }\n\n        function showPreview() {\n            edit.classList.add('hidden');\n            preview.classList.remove('hidden');\n        }\n    }\n\n    function setupAutosave() {\n\n        var previewAndEditSections = document.querySelectorAll('.preview-and-edit');\n\n        for (var i = 0; i < previewAndEditSections.length; i++) {\n            new PreviewAndEditSection(previewAndEditSections[i]);\n        }\n\n    }\n\n    document.addEventListener('DOMContentLoaded', setupAutosave);\n","// Functions from original CMS form page for moving dimensions up and down\n\n    function moveDimensionUp(event) {\n        event.preventDefault();\n        var row = $(event.currentTarget).parents('tr:first');\n        if (row.prev().length > 0) {\n            row.insertBefore(row.prev());\n            syncDimensionOrder();\n        }\n    }\n\n    function moveDimensionDown(event) {\n        event.preventDefault();\n        var row = $(event.currentTarget).parents('tr:last');\n        if (row.next().length > 0) {\n            row.insertAfter(row.next());\n            syncDimensionOrder();\n        }\n    }\n\n    function syncDimensionOrder() {\n        var rows = $('tr.movable'),\n            dimensions = [],\n            guid;\n\n        $(rows).each(function (index, row) {\n            guid = $(row).data('dimension-guid');\n            dimensions.push({\"index\": index, \"guid\": guid});\n        });\n        $.ajax({\n            type: 'POST',\n            url: set_dimension_order_post_url,\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({\"dimensions\": dimensions})\n        });\n    }\n\n    $(document).ready(function () {\n        $('.move-up').click(moveDimensionUp);\n        $('.move-down').click(moveDimensionDown);\n    })\n","// Function from original CMS form page for type-ahead select\n\n    document.addEventListener('DOMContentLoaded', function() {\n\n        var publisherFields = document.querySelectorAll('select.publisher');\n        for (var i = 0; i < publisherFields.length; i++) {\n            govukGovernmentOrganisationsAutocomplete({\n                selectElement: publisherFields[i],\n                showAllValues: false,\n                minLength: 2,\n                defaultValue: ''\n            });\n        }\n    });\n"],"sourceRoot":"../src"}