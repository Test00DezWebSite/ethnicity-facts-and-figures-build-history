{"version":3,"sources":["click_to_edit.js","organisation_autocomplete.js","reorder_dimensions.js"],"names":[],"mappingsdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"cms_autosave.js","sourcesContent":["// Functions to enable click-to-edit fields\n    function PreviewAndEditSection(element) {\n\n        var element = element;\n        var preview, edit, text_inputs, text_area;\n        setup();\n\n        function setup() {\n\n            preview = element.querySelector('.preview');\n            edit = element.querySelector('.edit');\n            text_inputs = edit.querySelectorAll('input[type=text]');\n            text_area = edit.querySelector('textarea');\n\n           preview.addEventListener('click', previewClicked);\n           preview.addEventListener('keyup', previewKeyedUp);\n\n            if (text_inputs.length == 1) {\n                text_inputs[0].addEventListener('blur', inputBlurred);\n                text_inputs[0].addEventListener('keyup', enterKeyPressed);\n            }\n\n            if (text_area) {\n                text_area.addEventListener('blur', inputBlurred);\n            }\n\n\n            var cancel = edit.querySelector('.cancel')\n            if (cancel) {\n                cancel.addEventListener('click', cancelClicked);\n            }\n\n            var save = edit.querySelector('.save')\n            if (save) {\n                save.addEventListener('click', saveAndPreview);\n            }\n        }\n\n        function inputBlurred(event) {\n\n            if (!edit.classList.contains('hidden') && !event.target.classList.contains('js-dependent')) {\n                saveAndPreview(event);\n            }\n        }\n\n        function cancelClicked(event) {\n\n            showPreview();\n\n            if (text_inputs[0]) {\n                if (preview.classList.contains('empty')) {\n                    text_inputs[0].value = '';\n                } else {\n                    text_inputs[0].value = preview.textContent;\n                }\n            }\n\n            event.preventDefault()\n        }\n\n        function enterKeyPressed(event) {\n            if (event.keyCode == 13) {\n                saveAndPreview(event);\n            }\n        }\n\n        function saveAndPreview(event) {\n\n            /* TODO: MAKE CALL TO SAVE THE UPDATED FIELD */\n            if (text_inputs[0]) {\n                var value = text_inputs[0].value.trim();\n                if (value == '') {\n                    preview.classList.add('empty');\n                    preview.textContent = preview.getAttribute('data-empty-text');\n                } else {\n                    preview.textContent = value;\n                    preview.classList.remove('empty');\n                }\n            }\n            if (text_area) {\n                var value = text_area.value.trim();\n                if (value == '') {\n                    preview.classList.add('empty');\n                    preview.textContent = preview.getAttribute('data-empty-text');\n                } else {\n                    if (text_area.classList.contains('for-bullets')) {\n                        preview.innerHTML = value.replace(/^\\*\\s/gm, \"<li>\").replace(/\\n/g, '</li>');\n                    } else if (text_area.classList.contains('for-paragraphs')) {\n                        preview.innerHTML = value.replace(/\\n/g, \"<br>\").replace(/\\n/g, '</li>');\n                    } else {\n                        preview.innerHTML = value;\n                    }\n                    preview.classList.remove('empty');\n                }\n            }\n\n            showPreview();\n            event.preventDefault()\n        }\n\n        function previewKeyedUp(event) {\n            if (event.keyCode == 13) {\n                showEdit();\n            }\n        }\n\n        function previewClicked(event) {\n            showEdit();\n        }\n\n        function showEdit() {\n            preview.classList.toggle('hidden');\n            edit.classList.toggle('hidden');\n            if (text_inputs[0]) {\n                text_inputs[0].focus();\n            }\n            if (text_area) {\n                text_area.focus();\n            }\n        }\n\n        function showPreview() {\n            edit.classList.add('hidden');\n            preview.classList.remove('hidden');\n        }\n    }\n\n    function setupAutosave() {\n\n        var previewAndEditSections = document.querySelectorAll('.preview-and-edit');\n\n        for (var i = 0; i < previewAndEditSections.length; i++) {\n            new PreviewAndEditSection(previewAndEditSections[i]);\n        }\n\n    }\n\n    document.addEventListener('DOMContentLoaded', setupAutosave);\n","// Function from original CMS form page for type-ahead select\n\n    document.addEventListener('DOMContentLoaded', function() {\n\n        var publisherFields = document.querySelectorAll('select.publisher');\n        for (var i = 0; i < publisherFields.length; i++) {\n            govukGovernmentOrganisationsAutocomplete({\n                selectElement: publisherFields[i],\n                showAllValues: false,\n                minLength: 2,\n                defaultValue: ''\n            });\n        }\n    });\n","// Functions from original CMS form page for moving dimensions up and down\n\n    function moveDimensionUp(event) {\n        event.preventDefault();\n        var row = $(event.currentTarget).parents('tr:first');\n        if (row.prev().length > 0) {\n            row.insertBefore(row.prev());\n            syncDimensionOrder();\n        }\n    }\n\n    function moveDimensionDown(event) {\n        event.preventDefault();\n        var row = $(event.currentTarget).parents('tr:last');\n        if (row.next().length > 0) {\n            row.insertAfter(row.next());\n            syncDimensionOrder();\n        }\n    }\n\n    function syncDimensionOrder() {\n        var rows = $('tr.movable'),\n            dimensions = [],\n            guid;\n\n        $(rows).each(function (index, row) {\n            guid = $(row).data('dimension-guid');\n            dimensions.push({\"index\": index, \"guid\": guid});\n        });\n        $.ajax({\n            type: 'POST',\n            url: set_dimension_order_post_url,\n            dataType: 'json',\n            contentType: 'application/json',\n            data: JSON.stringify({\"dimensions\": dimensions})\n        });\n    }\n\n    $(document).ready(function () {\n        $('.move-up').click(moveDimensionUp);\n        $('.move-down').click(moveDimensionDown);\n    })\n"],"sourceRoot":"../src"}