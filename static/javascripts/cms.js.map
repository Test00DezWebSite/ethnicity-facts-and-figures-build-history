{"version":3,"sources":["rd-chart-objects.js","rd-table-objects.js","rd-table.js","sticky.js"],"names":["barchartObject","data","primary_column","secondary_column","parent_column","order_column","chart_title","x_axis_label","y_axis_label","number_format","dataRows","_","clone","headerRow","shift","isSimpleBarchart","barchartSingleObject","barchartDoubleObject","column_name","category_column","indices","getIndices","categories","uniqueCategories","values","map","category","valueForCategory","parents","unique","row","type","title","text","parent_child","xAxis","yAxis","series","name","version","VERSION","category1","category2","seriesData","uniqueDataInColumnMaintainOrder","forEach","s","seriesRows","filter","push","sortChartSeries","panelBarchartObject","panel_column","category_order_column","panel_order_column","panelValues","panels","isUndefinedOrNull","uniqueDataInColumnOrdered","panelValue","panelRows","linechartObject","categories_column","series_column","series_order_column","seriesNames","series_index","series_order_index","order_values","index","findIndex","sortBy","zip","pair","chartSeries","seriesName","valueForCategoryAndSeries","panelLinechartObject","x_axis_column","panelNames","xAxisNames","uniqueDataInColumn","panelName","componentChartObject","grouping_column","row_order_column","groups","reverse","group","categoryIndex","orderIndex","valueIndex","parentIndex","categoryValue","rows","length","y","valueIsNumeric","isNumber","parentValue","relationships","is_parent","is_child","parent","parseFloat","color","defaultParentColor","defaultChildColor","value","isNaN","seriesIndex","seriesValue","serieses","toNumberSortValue","name_value","floatVal","substring","undefined","custom_column","headersLower","item","toLowerCase","indexOf","order","secondary","custom","buildTableObject","subtitle","footer","row_column","group_column","data_columns","column_captions","first_column_caption","group_order_column","table","groupedTable","simpleTable","preProcessTableObject","columnIndex","data_column_indices","data_column","hasParentChild","sortIndex","tableData","child","i","sortValues","numVal","sort_values","header","columns","category_caption","group_column_index","group_values","group_order_index","group_series","group_data","group_data_items","sort_val","original_obj","group_columns","dataVals","sortValue","row_item","findWhere","cell","val","columnDecimalPlaces","tableObject","dps","seriesDecimalPlaces","columnCouldBeAYear","years","seriesCouldBeYear","groupedTableDecimalPlaces","c","flatten","groupedTableCouldBeAYear","preProcessSimpleTableObject","preProcessGroupedTableObject","columnDps","couldBeYear","cellTuple","formatNumberWithDecimalPlaces","rowNo","items","row_html","cellValues","defaultVal","string","String","replace","num","Number","drawTable","container_id","console","log","simpleHtmlTable","groupedHtmlTable","table_html","appendTableTitle","appendTableSubtitle","appendSimpleTableHeader","appendSimpleTableBody","$","html","appendGroupTableHeader","appendGroupedTableBody","insertTableFooter","body_html","cellValue","header_html","column","multicell","doSecondRow","total_cells","exports","require","dataTools","document","ready","$stickies","each","stickyPosition","parseInt","this","position","top","window","scroll","scrollTop","addClass","removeClass","bind"],"mappings":"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","file":"cms.js","sourcesContent":["/**\n * Created by Tom.Ridd on 08/05/2017.\n */\nvar defaultParentColor = '#2B8CC4';\nvar defaultChildColor = '#B3CBD9';\nvar VERSION = '1.1'; // panel charts include sort option\n\nfunction barchartObject(data, primary_column, secondary_column, parent_column, order_column,\n                        chart_title, x_axis_label, y_axis_label, number_format) {\n    var dataRows = _.clone(data);\n    var headerRow = dataRows.shift();\n    if(isSimpleBarchart(secondary_column)) {\n        return barchartSingleObject(headerRow, dataRows, primary_column, parent_column, order_column, chart_title, x_axis_label, y_axis_label, number_format);\n    } else {\n        return barchartDoubleObject(headerRow, dataRows, primary_column, secondary_column, parent_column, order_column, chart_title, x_axis_label, y_axis_label, number_format);\n    }\n}\n\nfunction isSimpleBarchart(column_name) {\n    return column_name === '[None]' || column_name === null;\n}\n\nfunction barchartSingleObject(headerRow, dataRows, category_column, parent_column, order_column, chart_title, x_axis_label, y_axis_label, number_format) {\n    var indices = getIndices(headerRow, category_column, null, parent_column, order_column);\n\n    var categories = uniqueCategories(dataRows, indices['category'], indices['order']);\n    var values = _.map(categories, function(category) {\n        return valueForCategory(dataRows, indices['category'], indices['value'], indices['parent'], category);\n    });\n\n    var parents = [];\n    if(indices['parent'] !== null) {\n        parents = _.unique(_.map(dataRows, function(row) { return row[indices['parent']]; }));\n    }\n\n    return {\n        'type':'bar',\n        'title':{'text':chart_title},\n        'parent_child': indices['parent'] !== null,\n        'xAxis':{'title':{'text':x_axis_label}, 'categories':categories},\n        'yAxis':{'title':{'text':y_axis_label}},\n        'series': [{'name':category_column, 'data': values}],\n        'number_format':number_format,\n        'parents':parents,\n        'version':VERSION\n    };\n}\n\nfunction barchartDoubleObject(headerRow, dataRows, category1, category2, parent_column, order_column, chart_title, x_axis_label, y_axis_label, number_format) {\n    var indices = getIndices(headerRow, category1, category2, parent_column, order_column);\n\n    var categories = uniqueCategories(dataRows, indices['category'], indices['order']);\n\n    var series = uniqueDataInColumnMaintainOrder(dataRows, indices['secondary']);\n\n    var seriesData = [];\n    series.forEach(function(s){\n        var seriesRows = _.filter(dataRows, function(row) { return row[indices['secondary']] === s;});\n        var values = [];\n        _.forEach(categories, function(category) {\n            values.push(valueForCategory(seriesRows, indices['category'], indices['value'], indices['parent'], category));\n        });\n        seriesData.push({'name':s, 'data': values});\n    });\n\n    return {\n        'type':'bar',\n        'title':{'text': chart_title},\n        'xAxis':{'title':{'text':x_axis_label}, 'categories':categories},\n        'yAxis':{'title':{'text':y_axis_label}},\n        'series': sortChartSeries(seriesData),\n        'number_format':number_format,\n        'version':VERSION\n    };\n}\n\nfunction panelBarchartObject(data, category_column, panel_column, chart_title, x_axis_label, y_axis_label, number_format, category_order_column, panel_order_column) {\n    var dataRows = _.clone(data);\n    var headerRow = dataRows.shift();\n\n    var indices = getIndices(headerRow, category_column, panel_column, null, category_order_column, panel_order_column);\n    var categories = uniqueCategories(dataRows, indices['category'], indices['order']);\n\n    var panelValues = null;\n    if(isUndefinedOrNull(panel_order_column) || panel_order_column === '[None]') {\n        panelValues = uniqueDataInColumnMaintainOrder(dataRows, indices['secondary']);\n    } else {\n        panelValues = uniqueDataInColumnOrdered(dataRows, indices['secondary'], indices['custom'])\n    }\n\n    var panels = panelValues.map(function(panelValue) {\n        var panelRows = _.filter(dataRows, function(row) { return row[indices['secondary']] === panelValue;});\n\n        var values = categories.map(function(category) {\n           return valueForCategory(panelRows, indices['category'], indices['value'], indices['parent'], category);\n        });\n\n        return {\n            'type':'small_bar',\n            'title':{'text':panelValue},\n            'xAxis':{'title':{'text':x_axis_label}, 'categories':categories},\n            'yAxis':{'title':{'text':y_axis_label}},\n            'series': [{'name':category_column, 'data': values}],\n            'number_format':number_format\n        };\n    });\n\n    return {\n        'type': 'panel_bar_chart',\n        'title': {'text': chart_title},\n        'xAxis': {'title': {'text': x_axis_label}, 'categories': categories},\n        'yAxis': {'title': {'text': y_axis_label}},\n        'panels': panels,\n        'version':VERSION\n    }\n}\n\n\nfunction linechartObject(data, categories_column, series_column, chart_title, x_axis_label, y_axis_label, number_format, series_order_column) {\n    var dataRows = _.clone(data);\n    var headerRow = dataRows.shift();\n    var series_order_column_name = series_order_column === '[None]' ? null : series_order_column;\n\n    var indices = getIndices(headerRow, categories_column, series_column, null, null, series_order_column_name);\n    var categories = uniqueDataInColumnMaintainOrder(dataRows, indices['category']);\n    var seriesNames = uniqueDataInColumnMaintainOrder(dataRows, indices['secondary']);\n\n    /*\n    This is going to require some major refactoring down line\n    For now we are going to compromise with a degree of code ugliness, build tests, and then get to beautification\n     */\n    var series_index = indices['secondary'];\n    var series_order_index = indices['custom'];\n    if (series_order_index) {\n        var order_values = _.map(seriesNames, function(series) {\n            var index = _.findIndex(dataRows, function(row) {\n                return row[series_index] === series;\n            });\n            return dataRows[index][series_order_index];\n        });\n        seriesNames = _.map(_.sortBy(_.zip(seriesNames, order_values), function(pair) { return pair[1]; }), function(pair) { return pair[0]; });\n    }\n\n    var chartSeries = [];\n    _.forEach(seriesNames, function(seriesName) {\n        var values = [];\n        _.forEach(categories, function(category) {\n            values.push(valueForCategoryAndSeries(dataRows, indices['category'], category, indices['secondary'], seriesName, indices['value']));\n        });\n        chartSeries.push({'name':seriesName, 'data':values});\n    });\n\n    return {\n        'type':'line',\n        'title':{'text':chart_title},\n        'xAxis':{'title':{'text':x_axis_label}, 'categories':categories},\n        'yAxis':{'title':{'text':y_axis_label}},\n        'series': sortChartSeries(chartSeries),\n        'number_format':number_format,\n        'version':VERSION};\n}\n\nfunction panelLinechartObject(data, x_axis_column, panel_column, chart_title, x_axis_label, y_axis_label, number_format, panel_order_column) {\n    var dataRows = _.clone(data);\n    var headerRow = dataRows.shift();\n    var indices = getIndices(headerRow, panel_column, x_axis_column, null, null, panel_order_column);\n\n    var panelNames = null;\n    if(isUndefinedOrNull(panel_order_column) || panel_order_column === '[None]') {\n        panelNames = uniqueDataInColumnMaintainOrder(dataRows, indices['category']);\n    } else {\n        panelNames = uniqueDataInColumnOrdered(dataRows, indices['category'], indices['custom'])\n    }\n    var xAxisNames = uniqueDataInColumn(dataRows, indices['secondary']);\n\n    var panelCharts = _.map(panelNames, function(panelName) {\n            var values = _.map(xAxisNames, function(category) {\n                 return valueForCategoryAndSeries(dataRows, indices['secondary'], category, indices['category'], panelName, indices['value']);\n            });\n\n            return {'type':'line',\n                'title':{'text':panelName},\n                'xAxis':{'title':{'text':x_axis_label}, 'categories':xAxisNames},\n                'yAxis':{'title':{'text':y_axis_label}},\n                'series': [{'name':panelName, 'data':values}],\n                'number_format':number_format\n            };\n        });\n\n    return {\n        'type':'panel_line_chart',\n        'title':{'text':chart_title},\n        'panels': panelCharts,\n        'number_format':number_format,\n        'version':VERSION\n    };\n}\n\n\nfunction componentChartObject(data, grouping_column, series_column, chart_title, x_axis_label, y_axis_label, number_format, row_order_column, series_order_column) {\n\n    var dataRows = _.clone(data);\n    var headerRow = dataRows.shift();\n    var indices = getIndices(headerRow, grouping_column, series_column, null, row_order_column, series_order_column);\n\n    var groups = null;\n    if(isUndefinedOrNull(row_order_column) || row_order_column === '[None]') {\n        groups = uniqueDataInColumnMaintainOrder(dataRows, indices['category']);\n    } else {\n        groups = uniqueDataInColumnOrdered(dataRows, indices['category'], indices['order']);\n    }\n\n    var seriesNames = null;\n    if(isUndefinedOrNull(series_order_column) || series_order_column === '[None]') {\n        seriesNames = uniqueDataInColumnMaintainOrder(dataRows, indices['secondary']).reverse();\n    } else {\n        seriesNames = uniqueDataInColumnOrdered(dataRows, indices['secondary'], indices['custom']).reverse();\n    }\n\n    var chartSeries = seriesNames.map(function(seriesName)\n    {\n        var values = groups.map(function(group) {\n            return valueForCategoryAndSeries(dataRows, indices['category'], group, indices['secondary'], seriesName, indices['value'])\n        });\n        return {'name': seriesName, 'data': values};\n    });\n\n    return {\n        'type':'component',\n        'title':{'text':chart_title},\n        'xAxis':{'title':{'text':x_axis_label}, 'categories':groups},\n        'yAxis':{'title':{'text':y_axis_label}},\n        'series': chartSeries,\n        'number_format':number_format,\n        'version':VERSION\n    };\n}\n\n\nfunction uniqueCategories(dataRows, categoryIndex, orderIndex) {\n\n    if(orderIndex) {\n        return uniqueDataInColumnOrdered(dataRows, categoryIndex, orderIndex);\n    } else {\n        return uniqueDataInColumnMaintainOrder(dataRows, categoryIndex);\n    }\n}\n\nfunction valueForCategory(dataRows, categoryIndex, valueIndex, parentIndex, categoryValue) {\n\n    var rows = dataRows.filter(function(row) { return row[categoryIndex] === categoryValue });\n    if(rows.length === 0) {\n        return {y: 0, category: categoryValue};\n    } else {\n        var row = rows[0];\n        if(row[categoryIndex] === categoryValue) {\n            var valueIsNumeric = isNumber(row[valueIndex]);\n            if(parentIndex) {\n                var parentValue = row[parentIndex];\n                var relationships = {is_parent:parentValue === categoryValue,\n                    is_child: parentValue !== categoryValue, parent:parentValue};\n                if(relationships['is_parent']){\n                    return {\n                        y: valueIsNumeric ? parseFloat(row[valueIndex]) : 0,\n                        relationships: relationships,\n                        category: row[categoryIndex],\n                        color: defaultParentColor,\n                        text: valueIsNumeric ? 'number' : row[valueIndex]\n                    };\n                } else {\n                    return {\n                        y: valueIsNumeric ? parseFloat(row[valueIndex]) : 0,\n                        relationships: relationships,\n                        category: row[categoryIndex],\n                        color: defaultChildColor,\n                        text: valueIsNumeric ? 'number' : row[valueIndex]\n                    };\n                }\n            } else {\n                return {y: valueIsNumeric ? parseFloat(row[valueIndex]) : 0,\n                    category: row[categoryIndex],\n                    text: valueIsNumeric ? 'number' : row[valueIndex]};\n            }\n        }\n    }\n}\n\nfunction isNumber(value) {\n    return !isNaN(parseFloat(value));\n}\n\nfunction valueForCategoryAndSeries(dataRows, categoryIndex, categoryValue, seriesIndex, seriesValue, valueIndex) {\n\n    var rows = _.filter(dataRows, function(row) { return row[categoryIndex] === categoryValue && row[seriesIndex] === seriesValue });\n    return rows.length > 0 ? parseFloat(rows[0][valueIndex]) : 0;\n}\n\nfunction sortChartSeries(serieses) {\n\n    // check if these series are numerically sortable\n    var invalidSerieses = serieses.filter(function(series) {\n       return isNaN(toNumberSortValue(series.name))\n    });\n    if(invalidSerieses.length > 0) { return serieses; }\n\n    // if series sortable assign a sort value\n    serieses.forEach(function (series) {\n        series.name_value = toNumberSortValue(series.name);\n    });\n\n    // return the sorted series\n    return _.sortBy(serieses, function (series) {\n        return series.name_value;\n    })\n}\n\nfunction toNumberSortValue(value) {\n    var floatVal = parseFloat(value);\n    if(isNaN(floatVal)) {\n    return parseFloat(value.substring(1));\n    } else {\n    return floatVal;\n    }\n}\n\nfunction isUndefinedOrNull(value) {\n    return value === undefined || value === null;\n}\n\nfunction getIndices(headerRow, category_column, secondary_column, parent_column, order_column, custom_column) {\n    var headersLower = _.map(headerRow, function(item) { return item.toLowerCase();});\n\n    var category = isUndefinedOrNull(category_column) ? null: headersLower.indexOf(category_column.toLowerCase());\n    var order = isUndefinedOrNull(order_column) ? category : headersLower.indexOf(order_column.toLowerCase());\n    var parent = isUndefinedOrNull(parent_column) ? null: headersLower.indexOf(parent_column.toLowerCase());\n    var secondary = isUndefinedOrNull(secondary_column) ? null: headersLower.indexOf(secondary_column.toLowerCase());\n    var custom = isUndefinedOrNull(custom_column) ? null: headersLower.indexOf(custom_column.toLowerCase());\n\n    return {\n        'category': category >= 0 ? category : null,\n        'order': order >= 0 ? order : null,\n        'secondary': secondary >= 0 ? secondary : null,\n        'value': headersLower.indexOf('value'),\n        'parent': parent >= 0 ? parent : null,\n        'custom': custom >= 0 ? custom : null\n    };\n}\n\n// If we're running under Node - required for testing\nif(typeof exports !== 'undefined') {\n    var _ = require('../charts/vendor/underscore-min');\n    var dataTools = require('../charts/rd-data-tools');\n    var uniqueDataInColumnMaintainOrder = dataTools.uniqueDataInColumnMaintainOrder;\n\n    exports.barchartObject = barchartObject;\n    exports.linechartObject = linechartObject;\n    exports.componentChartObject = componentChartObject;\n    exports.panelLinechartObject = panelLinechartObject;\n    exports.panelBarchartObject = panelBarchartObject;\n}\n","/**\n * Created by Tom.Ridd on 25/07/2017.\n */\n\n\nfunction buildTableObject(data, title, subtitle, footer, row_column, parent_column, group_column, order_column, data_columns, column_captions, first_column_caption, group_order_column) {\n    var table = null;\n    if(!group_column || group_column === '[None]') {\n        table = simpleTable(data, title, subtitle, footer, row_column, parent_column, data_columns, order_column, column_captions, first_column_caption);\n    } else {\n        table = groupedTable(data, title, subtitle, footer, row_column, parent_column, group_column, data_columns, order_column, column_captions, first_column_caption, group_order_column);\n    }\n    return preProcessTableObject(table);\n}\n\nfunction simpleTable(data, title, subtitle, footer, category_column, parent_column, data_columns, order_column, column_captions, first_column_caption) {\n    var dataRows = _.clone(data);\n\n    var headerRow = dataRows.shift();\n\n    var columnIndex = headerRow.indexOf(category_column);\n    var data_column_indices = _.map(data_columns, function(data_column) { return headerRow.indexOf(data_column); });\n\n    var parentIndex = columnIndex;\n    var hasParentChild = false;\n    if(parent_column && parent_column !== '[None]') {\n        parentIndex = headerRow.indexOf(parent_column);\n        hasParentChild = true;\n    }\n\n    if(order_column && order_column !== '[None]') {\n        var sortIndex = headerRow.indexOf(order_column);\n    }\n\n    var tableData = _.map(dataRows, function(item, index) {\n        var relationships = {\n                'is_parent':false,\n                'is_child':false,\n                'parent':item[columnIndex]\n        };\n        if(hasParentChild) {\n            var parent = item[parentIndex];\n            var child = item[columnIndex];\n            relationships = {\n                'is_parent': parent === child,\n                'is_child': parent !== child,\n                'parent': parent\n            }\n        }\n\n        var values = _.map(data_column_indices, function (i) { return item[i]; });\n        var sortValues = _.map(values, function (value) { return numVal(value); });\n\n        if(sortIndex) {\n            return {\n                'category': item[columnIndex],\n                'relationships': relationships,\n                'order': item[sortIndex],\n                'values': values,\n                'sort_values': sortValues\n            };\n        } else {\n            return {\n                'category': item[columnIndex],\n                'relationships': relationships,\n                'order': index,\n                'values': values,\n                'sort_values': sortValues\n            };\n        }\n    });\n\n\n    tableData = _.sortBy(tableData, function(item) { return item['order'];});\n\n    var first_column = first_column_caption == null ? category_column : first_column_caption;\n\n    return {\n        'type':'simple',\n        'parent_child': hasParentChild,\n        'header': title,\n        'subtitle' :subtitle,\n        'footer' :footer,\n        'category':category_column,\n        'columns': column_captions,\n        'data': tableData,\n        'category_caption': first_column\n    };\n}\n\nfunction groupedTable(data, title, subtitle, footer,  category_column, parent_column, group_column, data_columns, order_column, column_captions, first_column_caption, group_order_column) {\n    var DEFAULT_SORT = -2;\n\n    var dataRows = _.clone(data);\n    var headerRow = dataRows.shift();\n\n    var columnIndex = headerRow.indexOf(category_column);\n    var data_column_indices = _.map(data_columns, function(data_column) { return headerRow.indexOf(data_column); });\n\n    var group_column_index = headerRow.indexOf(group_column);\n    var group_values = uniqueDataInColumnMaintainOrder(dataRows, group_column_index);\n\n    if(group_order_column && group_order_column !== '[None]') {\n        var group_order_index = headerRow.indexOf(group_order_column);\n        var order_values = _.map(group_values, function(item) {\n           var index = _.findIndex(dataRows, function(row) {\n               return row[group_column_index] === item;\n           });\n           return dataRows[index][group_order_index];\n        });\n\n        group_values = _.map(_.sortBy(_.zip(group_values, order_values), function(pair) { return pair[1]; }), function(pair) { return pair[0]; });\n    }\n\n    var sortIndex = DEFAULT_SORT;\n    if (order_column === null) {\n        sortIndex = columnIndex;\n    } else if(order_column !== '[None]') {\n        sortIndex = headerRow.indexOf(order_column);\n    }\n\n    var parentIndex = columnIndex;\n    var hasParentChild = false;\n    if(parent_column && parent_column !== '[None]') {\n        parentIndex = headerRow.indexOf(parent_column);\n        hasParentChild = true;\n    }\n\n    var group_series = _.map(group_values, function(group) {\n        var group_data = _.filter(dataRows, function(item) { return item[group_column_index] === group;});\n        var group_data_items = _.map(group_data, function(item, index) {\n            var relationships = {\n                'is_parent':false,\n                'is_child':false,\n                'parent':item[columnIndex]\n            };\n            if(hasParentChild) {\n                var parent = item[parentIndex];\n                var child = item[columnIndex];\n                relationships = {\n                    'is_parent': parent === child,\n                    'is_child': parent !== child,\n                    'parent': parent\n                }\n            }\n            var sort_val = sortIndex === DEFAULT_SORT ? index : item[sortIndex];\n            var values = _.map(data_column_indices, function(i) { return item[i]});\n            var sortValues = _.map(values, function(value) { return numVal(value); });\n            return {'category':item[columnIndex], 'relationships':relationships, 'order':sort_val, 'values': values, 'sort_values': sortValues}\n        });\n        return {'group':group, 'data':group_data_items};\n    });\n\n    var original_obj = {\n        'type':'grouped',\n        'category': category_column,\n        'title':{'text':'Grouped Table'},\n        'header': title,\n        'columns':column_captions,\n        'groups': group_series};\n\n    var group_columns = [''];\n\n    _.forEach(original_obj.groups, function (group) {\n        group_columns.push(group.group);\n    });\n\n    var dataVals = [];\n    var rows = _.map(original_obj.groups[0].data, function(item) { return item.category; });\n    _.forEach(rows, function(row) {\n        var values = [];\n        var sortValue = '';\n        var parentValue = '';\n        var relationships = {};\n        _.forEach(original_obj.groups, function(group) {\n            var row_item = _.findWhere(group.data, {'category':row});\n            sortValue = row_item['order'];\n            parentValue = row_item['parent'];\n            relationships = row_item['relationships'];\n            _.forEach(row_item.values, function(cell) {\n                values.push(cell);\n            })\n        });\n\n        var sortValues = [];\n        _.forEach(values, function(val) { sortValues.push(numVal(val)); });\n\n        dataVals.push({'category': row, 'relationships': relationships, 'parent': parentValue, 'order':sortValue, 'values':values, 'sort_values':sortValues});\n    });\n\n    dataVals = _.sortBy(dataVals, function(item) { return item['order'];});\n    group_series = _.map(group_series, function (group) {\n        group.data = _.sortBy(group.data, function(item) { return item['order'];});\n        return group;\n    });\n\n    var first_column = first_column_caption == null ? category_column : first_column_caption;\n\n    return {\n        'group_columns': group_columns,\n        'type':'grouped',\n        'category': category_column,\n        'group_column': group_column,\n        'columns': column_captions,\n        'data': dataVals,\n        'header':title,\n        'subtitle':subtitle,\n        'footer':footer,\n        'groups': group_series,\n        'parent_child': hasParentChild,\n        'category_caption': first_column\n    };\n}\n\nfunction columnDecimalPlaces(tableObject) {\n    var dps = [];\n    // iterate through columns\n    for(var i in tableObject.data[0].values) {\n\n        // gather all the data for that column\n        var series = _.map(tableObject.data, function(item) {\n            return item.values[i];\n        });\n        dps.push(seriesDecimalPlaces(series));\n    }\n    return dps;\n}\n\nfunction columnCouldBeAYear(tableObject) {\n    var years = [];\n\n    // iterate through columns\n    for(var i in tableObject.data[0].values) {\n\n        // gather all the data for that column\n        var series = _.map(tableObject.data, function(item) { return item.values[i]; });\n        years.push(seriesCouldBeYear(series));\n    }\n    return years;\n}\n\nfunction groupedTableDecimalPlaces(tableObject) {\n    var dps = [];\n    // iterate through columns\n    for(var c in tableObject.groups[0].data[0].values) {\n\n        // gather all data for a column\n        var series = _.flatten(\n            _.map(tableObject.groups, function(group) {\n                return _.map(group.data, function(item) {\n                    return item.values[c];\n            })\n        }));\n        dps.push(seriesDecimalPlaces(series));\n    }\n    return dps;\n}\n\nfunction groupedTableCouldBeAYear(tableObject) {\n    var years = [];\n    // iterate through columns\n    for(var c in tableObject.groups[0].data[0].values) {\n\n        // gather all data for a column\n        var series = _.flatten(\n            _.map(tableObject.groups, function(group) {\n                return _.map(group.data, function(item) {\n                    return item.values[c];\n            })\n        }));\n        years.push(seriesCouldBeYear(series));\n    }\n    return years;\n}\n\nfunction preProcessTableObject(tableObject) {\n    if(tableObject.type === 'simple') {\n        preProcessSimpleTableObject(tableObject);\n    } else if(tableObject.type === 'grouped') {\n        preProcessGroupedTableObject(tableObject);\n    }\n    return tableObject;\n}\n\nfunction preProcessSimpleTableObject(tableObject) {\n    var columnDps = columnDecimalPlaces(tableObject);\n    var couldBeYear = columnCouldBeAYear(tableObject);\n\n    tableObject.data = _.map(tableObject.data, function(item) {\n        item.values = _.map(_.zip(item.values, columnDps, couldBeYear), function(cellTuple) {\n            if(cellTuple[2] === false) {\n                return formatNumberWithDecimalPlaces(cellTuple[0], cellTuple[1]);\n            } else {\n                return cellTuple[0];\n            }\n        });\n        return item;\n    });\n}\n\nfunction preProcessGroupedTableObject(tableObject) {\n    var columnDps = groupedTableDecimalPlaces(tableObject);\n    var couldBeYear = groupedTableCouldBeAYear(tableObject);\n\n\n    tableObject.groups = _.map(tableObject.groups, function(group) {\n        group.data = _.map(group.data, function(item) {\n           item.values = _.map(_.zip(item.values, columnDps, couldBeYear), function(cellTuple) {\n                if(cellTuple[2] === false) {\n                    return formatNumberWithDecimalPlaces(cellTuple[0], cellTuple[1]);\n                } else {\n                    return cellTuple[0];\n                }\n            });\n            return item;\n        });\n        return group;\n    });\n\n    // update tableObject data\n    tableObject.data = [];\n    // for each row\n    for(var rowNo in tableObject.groups[0].data) {\n        // grab a prototype cell\n        var row = _.clone(tableObject.groups[0].data[rowNo]);\n        // fill it with all contents across the groups\n        row.values = _.flatten(_.map(tableObject.groups, function(group) {\n            return group.data[rowNo].values;\n        }));\n        row.sort_values = _.flatten(_.map(tableObject.groups, function(group) {\n            return group.data[rowNo].sort_values;\n        }));\n        // add to the data\n        tableObject.data.push(row)\n    }\n\n\n    var items = _.sortBy(tableObject.groups[0].data, function(item) { return item.order; });\n    var rows = _.map(items, function(item) { return item.category; });\n    _.forEach(rows, function(row) {\n        var row_html = '<tr><th>' + row + '</th>';\n        _.forEach(tableObject.groups, function(group) {\n            var row_item = _.findWhere(group.data, {'category':row});\n            _.forEach(_.zip(row_item.values, columnDps, couldBeYear), function(cellValues) {\n                if(cellValues[2]) {\n                    row_html = row_html + '<td>' + cellValues[0] + '</td>';\n                } else {\n                    row_html = row_html + '<td>' + formatNumberWithDecimalPlaces(cellValues[0], cellValues[1]) + '</td>';\n                }\n            });\n        });\n    });\n}\n\nfunction numVal(value, defaultVal) {\n    var string = String(value).replace(/\\,/g, '')\n    var num = Number(string);\n    return num ? num : value;\n}\n\n// If we're running under Node - required for testing\nif(typeof exports !== 'undefined') {\n    var _ = require('../charts/vendor/underscore-min');\n    var dataTools = require('../charts/rd-data-tools');\n    var uniqueDataInColumnMaintainOrder = dataTools.uniqueDataInColumnMaintainOrder;\n    var seriesDecimalPlaces = dataTools.seriesDecimalPlaces;\n    var seriesCouldBeYear = dataTools.seriesCouldBeYear;\n    var formatNumberWithDecimalPlaces = dataTools.formatNumberWithDecimalPlaces;\n\n    exports.buildTableObject = buildTableObject;\n    exports.simpleTable = simpleTable;\n    exports.groupedTable = groupedTable;\n}","/**\n * Created by Tom.Ridd on 05/05/2017.\n */\n\nfunction drawTable(container_id, tableObject) {\n    preProcessTableObject(tableObject);\n    console.log(tableObject);\n\n    if(tableObject.type === 'simple') {\n        return simpleHtmlTable(container_id, tableObject);\n    } else if (tableObject.type === 'grouped') {\n        return groupedHtmlTable(container_id, tableObject);\n    }\n}\n\nfunction simpleHtmlTable(container_id, tableObject) {\n\n    var table_html = \"\";\n    table_html = appendTableTitle(table_html, tableObject);\n    table_html = appendTableSubtitle(table_html, tableObject);\n\n    table_html = table_html + \"<table class='table table-sm'>\";\n    table_html = appendSimpleTableHeader(table_html, tableObject);\n    table_html = appendSimpleTableBody(table_html, tableObject);\n    table_html = table_html + \"</table>\";\n\n    $(\"#\" + container_id).html(table_html);\n\n    return true;\n}\n\nfunction groupedHtmlTable(container_id, tableObject) {\n\n    var table_html = \"\";\n    table_html = appendTableTitle(table_html, tableObject);\n    table_html = appendTableSubtitle(table_html, tableObject);\n\n    table_html = table_html + \"<table class='table table-sm'>\";\n    table_html = appendGroupTableHeader(table_html, tableObject);\n    table_html = appendGroupedTableBody(table_html, tableObject)\n    table_html = table_html + \"</table>\";\n\n    table_html = insertTableFooter(table_html, tableObject);\n\n    $(\"#\" + container_id).html(table_html);\n\n    return true;\n}\n\nfunction appendSimpleTableBody(table_html, tableObject) {\n    var body_html = \"<tbody>\";\n    _.forEach(tableObject.data, function(item) {\n        body_html = body_html + \"<tr>\";\n        if(tableObject.parent_child) {\n            if(item.relationships.is_parent) {\n                body_html = body_html + '<th class=\"parent_row\">'\n            } else {\n                body_html = body_html + '<th class=\"child_row\">'\n            }\n        } else {\n            body_html = body_html + '<th>'\n        }\n        body_html = body_html + item.category + '</th>';\n\n        _.forEach(item.values, function(cellValue) {\n            body_html = body_html + '<td>' + cellValue + '</td>';\n        });\n        body_html = body_html + \"</tr>\";\n    });\n    body_html = body_html + \"</tbody>\";\n    return table_html + body_html;\n}\n\nfunction appendGroupedTableBody(table_html, tableObject) {\n    var body_html = '<tbody>';\n\n    var items = _.sortBy(tableObject.groups[0].data, function(item) { return item.order; });\n\n    _.forEach(items, function(item) {\n        var row = item.category;\n        var row_html = '<tr>';\n        if(tableObject.parent_child) {\n            if(item.relationships.is_parent) {\n                row_html = row_html + '<th class=\"parent_row\">'\n            } else {\n                row_html = row_html + '<th class=\"child_row\">'\n            }\n        } else {\n            row_html = row_html + '<th>'\n        }\n        row_html = row_html + row + '</th>';\n\n        _.forEach(tableObject.groups, function(group) {\n            var row_item = _.findWhere(group.data, {'category':row});\n            _.forEach(row_item.values, function(cellValue) {\n                row_html = row_html + '<td>' + cellValue + '</td>';\n            });\n        });\n        row_html = row_html + '</tr>';\n        body_html = body_html + row_html;\n    });\n    body_html = body_html + \"</tbody>\";\n    return table_html + body_html;\n}\n\nfunction appendTableTitle(table_html, tableObject) {\n    if(tableObject.header && tableObject.header !== '') {\n        return table_html + \"<div class='table-title heading-small'>\" + tableObject.header + \"</div>\";\n    } else {\n        return table_html;\n    }\n}\n\nfunction insertTableFooter(table_html, tableObject) {\n    if(tableObject.footer && tableObject.footer !== '') {\n        return table_html + \"<div class='table-footer'>\" + tableObject.footer + \"</div>\";\n    } else {\n        return table_html;\n    }\n}\n\nfunction appendTableSubtitle(table_html, tableObject) {\n    if(tableObject.subtitle && tableObject.subtitle !== '') {\n        return table_html + \"<div class='table-subtitle'>\" + tableObject.subtitle + \"</div>\";\n    } else {\n        return table_html;\n    }\n}\n\nfunction appendSimpleTableHeader(table_html, tableObject) {\n    var header_html = \"\";\n    if(tableObject['category_caption'] == null) {\n        header_html = \"<thead><tr><th></th>\";\n    } else {\n        header_html = \"<thead><tr><th>\" + tableObject.category_caption + \"</th>\";\n    }\n\n    _.forEach(tableObject.columns, function(column) {\n        header_html = header_html + '<th>' + column + '</th>';\n    });\n    header_html = header_html + \"</tr></thead>\"\n    return table_html + header_html;\n}\n\nfunction appendGroupTableHeader(table_html, tableObject) {\n    var header_html = '';\n    if(tableObject['category_caption'] == null) {\n        header_html = \"<thead><tr><th></th>\";\n    } else {\n        header_html = \"<thead><tr><th>\" + tableObject.category_caption + \"</th>\";\n    }\n\n    // Add a row with titles for each group\n    _.forEach(tableObject.groups, function (group) {\n        header_html = header_html + multicell(group.group, tableObject.columns.length);\n    });\n    header_html = header_html + '</tr>';\n\n    // Check if we need to add a second row (based if any column headings exist)\n    var doSecondRow = false;\n    _.forEach(tableObject.columns, function(column) {\n        if(column !== '') {\n            doSecondRow = true;\n        }\n    });\n\n    // If a second row is required add it\n    if(doSecondRow) {\n        header_html = header_html + '<tr><td></td>';\n        _.forEach(tableObject.groups, function (group) {\n            _.forEach(tableObject.columns, function(column) {\n                header_html = header_html + '<td>' + column + '</td>';\n            });\n        });\n        header_html = header_html + '</tr>';\n    }\n\n    header_html = header_html + '</thead>';\n\n    return table_html + header_html;\n}\n\nfunction multicell(text, total_cells) {\n    return '<td colspan=' + total_cells + '>' + text + '</td>';\n}","$(document).ready(function () {\n  var $stickies = $(\".sticky-js\");\n  $.each($stickies, function () {\n    var stickyPosition = parseInt($(this).position().top);\n    $(window).scroll(function () {\n      var scrollTop = $(window).scrollTop();\n      if (scrollTop >= stickyPosition) {\n        $(this).addClass('sticky-js-fixed');\n      } else {\n        $(this).removeClass('sticky-js-fixed');\n      }\n    }.bind(this));\n  });\n});"],"sourceRoot":"../src"}